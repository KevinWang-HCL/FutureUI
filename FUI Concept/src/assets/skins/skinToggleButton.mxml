<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="58" minHeight="58"
				   alpha.disabled="0.5">
	<fx:Metadata>
		[HostComponent("widgets.wToggleButton")]
	</fx:Metadata>

	
	<fx:Script>
		<![CDATA[
			import spark.components.IconPlacement;
			
			import widgets.wToggleButton;
			
			public override function styleChanged(styleProp:String):void
			{
				super.styleChanged(styleProp);
				
				if(!styleProp || styleProp == "styleName" ||styleProp == "icon")
				{
					var icon:* = getStyle("icon");
					defaultIndicatorUsed = !icon;
				}
			}
			
			private var _defaultIndicatorUsed:Boolean = true;
			
			[Bindable]
			public function get defaultIndicatorUsed():Boolean
			{
				return _defaultIndicatorUsed;
			}
			
			public function set defaultIndicatorUsed(value:Boolean):void
			{
				_defaultIndicatorUsed = value;
			}
			
			
			
			private function setButtonLayoutAndRadii(iconPlacement:String):void
			{
				if(iconPlacement == IconPlacement.LEFT)
				{
					statusIndicator.left = 0;
					statusIndicator.width = 46;
					labelArea.left = 46;
					labelArea.right = 0;	
					
					rectLabelArea.bottomRightRadiusX = (hostComponent as wToggleButton).bottomLeftRadius;
					rectLabelArea.topRightRadiusX=(hostComponent as wToggleButton).topLeftRadius;
					
					rectStatusIndicator.bottomLeftRadiusX=(hostComponent as wToggleButton).bottomRightRadius;
					rectStatusIndicator.topLeftRadiusX=(hostComponent as wToggleButton).topRightRadius;
				}
				else //Assume right, even though top and bottom are valid values
				{
					statusIndicator.right = 0;
					statusIndicator.width = 46;
					labelArea.left = 0;
					labelArea.right = 46;
					
					rectLabelArea.bottomLeftRadiusX = (hostComponent as wToggleButton).bottomLeftRadius;
					rectLabelArea.topLeftRadiusX=(hostComponent as wToggleButton).topLeftRadius;
					
					rectStatusIndicator.bottomRightRadiusX=(hostComponent as wToggleButton).bottomRightRadius;
					rectStatusIndicator.topRightRadiusX=(hostComponent as wToggleButton).topRightRadius;
				}
			}
			
			protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				setButtonLayoutAndRadii(getStyle("iconPlacement"));
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="selected"/>
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<!--*** Transitions ***-->
	<s:transitions>
		<s:Transition autoReverse="true" fromState="*" toState="selected">
			<s:Parallel duration="250" hideFocusRing="true">
				<s:AnimateColor target="{gradientStatus0}" />
				<s:AnimateColor target="{gradientStatus1}" />
			</s:Parallel>			
		</s:Transition>
	</s:transitions>
	
	<s:Group left="0" right="0" top="0" bottom="0">
		<!-- Label Area -->
		<!--- @private -->
		<s:Group id="labelArea" top="0" bottom="0" >
			<!-- Background -->
			<s:Rect id="rectLabelArea" left="0" right="0" top="0" bottom="0">
				<s:fill>
					<s:LinearGradient rotation="90">
<!--						<s:GradientEntry color="0xD5D5D5" ratio="0"/>
						<s:GradientEntry color="0xB5B5B5" ratio="1"/>-->
						<s:GradientEntry color="0XD0D7DC" ratio="0"/>
						<s:GradientEntry color="0xB0B7BD" ratio="1"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			
			<!-- Label -->
			<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
			<s:Label id="labelDisplay" styleName="toggleButton"
					 maxDisplayedLines="2"
					 textAlign="{hostComponent.textAlignmentProp}"
					 left="10" right="10" top="2" bottom="2">
			</s:Label>
		</s:Group>
		
		
		<!-- Status Indicator -->
		<!--- @private -->
		<s:Group id="statusIndicator" top="0" bottom="0" width="46" >
			<!-- background -->
			<s:Rect id="rectStatusIndicator" left="0" right="0" top="0" bottom="0">
				<s:fill>
					<s:LinearGradient rotation="90" >
						<s:GradientEntry id="gradientStatus0" color="0x7E7E7E" color.selected="0x3DA6EA" ratio="0"/>
						<s:GradientEntry id="gradientStatus1" color="0x646464" color.selected="0x3793D0" ratio="1"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			
			<s:BitmapImage id="iconDisplay"
						   verticalCenter="0" horizontalCenter="0"
						   visible="{!defaultIndicatorUsed}"/>
			
			<!-- Tick Icon -->
			<s:Group id="tick" horizontalCenter="0" verticalCenter="0" includeIn="selected"
					 visible="{defaultIndicatorUsed}">
				<s:Line x="11" y="3" xTo="18" yFrom="18">
					<s:stroke>
						<s:SolidColorStroke caps="none" color="0xFFFFFF" joints="round" miterLimit="4" weight="6" pixelHinting="true"/>
					</s:stroke>
				</s:Line>
				<s:Line x="3" y="9" xFrom="12" yFrom="12">
					<s:stroke>
						<s:SolidColorStroke caps="none" color="0xFFFFFF" joints="miter" miterLimit="4" weight="6" pixelHinting="true"/>
					</s:stroke>
				</s:Line>
				
				<s:filters>
					<s:DropShadowFilter alpha="0.8" angle="90" blurX="2" blurY="2" color="0x000000" distance="0" hideObject="false" inner="false" knockout="false" quality="1" strength="1"/>
				</s:filters>
			</s:Group>
			
			<!-- Cross Icon -->
			<s:Group id="cross" horizontalCenter="0" verticalCenter="0" excludeFrom="selected"
					 visible="{defaultIndicatorUsed}">
				<s:Line x="3" y="3" xTo="18" yFrom="18">
					<s:stroke>
						<s:SolidColorStroke caps="none" color="#FFFFFF" joints="round" miterLimit="4" weight="6" pixelHinting="true"/>
					</s:stroke>
				</s:Line>
				<s:Line x="3" y="3" xFrom="18" yFrom="18">
					<s:stroke>
						<s:SolidColorStroke caps="none" color="#FFFFFF" joints="miter" miterLimit="4" weight="6" pixelHinting="true"/>
					</s:stroke>
				</s:Line>
				
				<s:filters>
					<s:DropShadowFilter alpha="0.8" angle="90" blurX="2" blurY="2" color="0x000000" distance="0" hideObject="false" inner="false" knockout="false" quality="1" strength="1"/>
				</s:filters>
			</s:Group>
		</s:Group>
		
		<s:filters>
			<s:BevelFilter angle="90" blurX="1" blurY="1" distance="1"
						   knockout="false" quality="1" strength="1" type="inner"
						   highlightAlpha="0.8" highlightColor="0xFFFFFF" shadowAlpha="0.4" shadowColor="0x000000"/>
			<s:DropShadowFilter alpha="1" angle="90" blurX="2" blurY="2" color="0x000000"
								distance="1" quality="2" strength=".7"/>
		</s:filters>
	</s:Group>
</s:Skin>
